var table = m.loadTable("LA_Pools-Pools_per_Hood.csv");// 找出池子数量的最大值和最小值，用于后续的圆形大小缩放var maxPools = 0;var minPools = Infinity;for (var i = 0; i < table.getRowCount(); i++) {  var poolCount = table.getNum(i, "poolcount");  if (poolCount > maxPools) maxPools = poolCount;  if (poolCount < minPools) minPools = poolCount;}// 设置圆形的最大和最小半径var maxRadius = 50;var minRadius = 5;m.blendMode("MULTIPLY");// 遍历表格数据并绘制圆形var columns = Math.ceil(Math.sqrt(table.getRowCount()));var rows = Math.ceil(table.getRowCount() / columns);var horizontalSpacing = 1920 / (columns + 1);var verticalSpacing = 1080 / (rows + 1);for (var i = 0; i < table.getRowCount(); i++) {  var hoodName = table.getString(i, "hoodname");  var poolCount = table.getNum(i, "poolcount");  // 计算圆形半径  var radius = m.map(poolCount, minPools, maxPools, minRadius, maxRadius);  // 计算矩阵中的行和列  var col = i % columns;  var row = Math.floor(i / columns);  // 计算圆形位置  var x = horizontalSpacing * (col + 1);  var y = verticalSpacing * (row + 1);  // 设置填充颜色和描边  m.fill(0, 120, 255);  m.stroke(255);  m.strokeWeight(2);  // 绘制圆形  m.ellipse(x, y, radius * 2, radius * 2);  // 添加文本标签  m.textSize(22);  m.fill(255);  m.noStroke();  m.text(hoodName + "\n" + poolCount, x, y);}